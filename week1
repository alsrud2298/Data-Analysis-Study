# 2-1 숫자형
a = 123 # 정수형(Integer)
a = 1.2 # 실수형 (Floating-point)
a = 4.24E10 # 실수형의 소수점 표현 방식
a = 0o177 # 8진수 0o
a = 0x8ff # 16진수 0x

# 사칙연산
a = 3
b = 4
print(a+b)
print(a/b) 
print(a**b) # 제곱
print(a%b) # 나머지 반환
print(a//b) # 몫 반환

# 2-2 문자열 자료형
# 문자열 만드는 법
print("Hello World")
print('Python is fun')
print("""Life is too short, You need python""")
print('''Life is too short, You need python''')

# 문자열 내부에 따옴표 포함시키기
print('"Python is very easy." he says.')
print('Python\'s favorite food is perl')

# 여러줄의 문자열 변수에 대입하기
multiline = "Life is too short\nYou need python" #이스케이프 코드
print(multiline)
multiline2 = '''
Life is too short
You need python
'''
print(multiline2)

# 문자열 연산하기
head = "Python"
tail = " is fun!"
print(head + tail)

a = "python"
print(a*2)
# 프로그램 제목 표시에 활용 
print("="*50)
print("My Program")
print("="*50)

# 문자열 길이 구하기
a = "Life is too short"
print(len(a))

# 문자열 인덱싱과 슬라이싱
# 파이썬 = 제로 인덱스
a = "Life is too short, You need Python"
print(a[3])
print(a[-1]) # 뒤에서부터 접근
print(a[0])
print(a[-0])

# 슬라이싱
print(a[0:4]) # 끝 번호에 해당하는 것은 포함하지 않음.
print(a[:17])
print(a[:])
print(a[19:-7])

a = "20010331Rainy"
year = a[:4]
day = a[4:8]
weather = a[8:]
print(year,day,weather)

# 문자열의 요소값은 변경 불가능함 (immutable 자료형)
a = "Pithon"
print(a[:1]+"y"+a[2:])

# 문자열 포매팅
# 1. 숫자 바로 대입
print("I eat %d apples."%3)
# 2. 문자열 바로 대입
print("I eat %s apples."%"five")
# 3. 숫자 값을 나타내는 변수로 대입
number = 3
print("I eat %d apples"%number)
# 4. 2개 이상의 값 넣기
number = 10
day = "three"
print("I ate %d apples. so I was sick for %s days"%(number, day))
# 포맷코드 %s는 어떤 형태의 값이든 변환 가능 !

# 포맷코드와 숫자 함께 사용
# 1. 정렬과 공백
print("%10s"%'hi') # 오른쪽 정렬
print("%-10sjain."%'hi') # 왼쪽 정렬
# 2. 소수점 표현하기
print("%10.4f"%3.42134234)

# format함수를 사용한 포매팅
print("I ate {0} apples. so I was sick for {1} days".format(number,day))
print("I ate {number} apples. so I was sick for {day} days".format(number=3,day=2))
print("I ate {0} apples. so I was sick for {day} days".format(10,day=3))

# 정렬
print("{0:<10}".format("hi")) # 왼쪽정렬 :<
print("{0:>10}".format("hi")) # 오른쪽정렬 :>
print("{0:^10}".format("hi")) # 가운데정렬 :^

# 공백 채우기
print("{0:=^10}".format("hi"))

# 소수점 표현하기
y = 3.412435
print("{0:0.4f}".format(y))

# 중괄호 표현하기
print("{{ and }} ".format())

# f 문자열 포매팅 ( 파이썬 3.6부터 사용 가능)
name = '홍길동'
age = 30
print(f'나의 이름은 {name}입니다. 나이는 {age}입니다.')
print(f'나는 내년이면 {age+1}살이 된다.')

d = {'name':'마민경','age':23}
print(f'나의 이름은 {d["name"]}입니다. 나이는 {d["age"]}입니다.')

# 정렬, 공백채우기, 소수점 표현
print(f'{"hi":<10}')
print(f'{"hi":!^10}')
print(f'{y:0.4f}')
print(f'{{and}}')

# 문자열 내장 함수
# 문자 개수 세기 count
a = "hobby"
print(a.count('b'))
# 위치 알려주기1 (find) : 해당 문자열이 처음으로 나온 위치 반환 & 존재하지 않는 경우 -1 반환
a = "Python is the best choice"
a.find('b')
a.find('k')
# 위치 알려주기2 (index) : 해당 문자열이처음으로 나온 위치 반환 & 존재하지 않는 경우 오류 발생
a.index('t')
#a.index('k')
# 문자열 삽입 join
print(",".join("abcd"))
# 소문자 -> 대문자 upper
a = "hi"
print(a.upper())
# 대문자 -> 소문자 lower
a = "HI"
print(a.lower())
# 오른쪽 공백 지우기 rstrip
a = "  hi"
print(a.rstrip())
# 양쪽 공백 지우기 strip
a = "  hi     "
print(a.strip())
# 문자열 바꾸기 replace
a = "Life is too short"
print(a.replace("Life","Your leg"))
# 문자열 나누기 split
print(a.split())
b = "a:b:c:d"
print(b.split(':'))
# 2-3 리스트 자료형
a = []
b = ['Life','is','too','short']
c = [1,2,['Life','is']]
# 리스트 인덱싱과 슬라이싱
a = [1,2,3,['a','b','c']]
print(a[0])
print(a[0]+a[2])
print(a[-1])
print(a[-1][0])
# 슬라이싱 -> 문자열 슬라이싱과 동일 
print(a[0:2])
print(a[3][:2])
# 리스트 연산하기
# 리스트 덧셈 = 리스트 합치기
a = [1,2,3]
b = [4,5,6]
print(a+b)
# 리스트 반복하기
print(a*3)
# 리스트 길이구하기
a = [1,2,3]
print(len(a))
# 리스트 수정과 삭제
print(a)
a[2] = 4
print(a)
del a[1] # 파이썬 자체 삭제 함수
print(a)
del a[:]
print(a)
# 리스트 관련 함수
# 리스트 마지막에 요소 추가 append
a = [1,2,3]
a.append(4)
print(a)
# 리스트 정렬 sort
a = [1,3,2,4]
a.sort()
print(a)
# 리스트 뒤집기 reverse (정렬 x )
a = ['a','c','b']
a.reverse()
print(a)
# 위치 반환 index, 존재하지 않는 경우 값 오류 발생
print(a.index('a'))
# 리스트 요소 삽입 insert
a = [1,2,3]
a.insert(0,4) # 0번째 위치에 4 삽입
print(a)
# 리스트 요소 제거 remove
a = [1,2,3,1,2,3]
a.remove(3) # 리스트에서 첫번째로 나오는 x 삭제
print(a)
# 리스트 요소 끄집어내기 pop
a = [1,2,3]
a.pop() # 맨 마지막 요소 돌려주고 그 요소 삭제
print(a)
# 리스트에 포함된 요소 x 개수 세기 count
a = [1,2,3,1]
print(a.count(1))
# 리스트 확장 extend
a.extend([4,5])
print(a)
a += [4,5]
print(a)
# 2-4 튜플 자료형
# 리스트 [] : 값 생성, 삭제, 수정 가능
# 튜플 () : 값 바꿀 수 없음, 괄호 생략 가능
t1 = (1,) # 1개의 요소를 가질 때는 반드시 콤마 붙여야 함
t1 = (1,2,'a','b')
#del t1[0] # 튜플 요소 삭제 불가능
#t1[0] = 'c' # 튜플 요소값 변경 불가능
# 튜플 인덱싱, 슬라이싱, 더하기, 곱하기, 길이구하기
print(t1[0])
print(t1[1:])
t2 = (3,4)
print(t1+t2)
print(t2*3)
print(len(t1))
# 2-5 딕셔너리 자료형
# 대응관계를 나타내는 자료형 : 연관 배열 or 해시
dic = {'name':'정민','phone':'01047367057','birth':'1031'}
# 딕셔너리 쌍 추가 
dic[2] = [1.2,3]
print(dic)
# 딕셔너리 요소 삭제
del dic[2]
print(dic)
# key 사용해 value 얻기
grade = {'pey':10,'julliet':99}
print(grade['pey'])
# 딕셔너리 주의사항
# - 딕셔너리에서 key는 고유한 값이므로 중복되는 key값을 설정하는 경우 하나를 제외한 나머지는 무시됨.
# - key에 리스트 사용 불가능 , 튜플은 가능 -> 리스트는 변경가능하기 때문 ! 
# 딕셔너리 관련 함수들
a = {'name':'pey','phone':'0119991234','birth':'1118'}
print(a.keys()) # dict_keys 객체로 반환 for 메모리 낭비 감소 
for k in a.keys():
    print(k)
print(a.values()) # dict_values 객체로 반환
print(a.items()) # dict_items 객체로 반환
# 키:값 쌍 모두 지우기 clear
a.clear()
print(a)
# key로 value 얻기 get
a = {'name':'pey','phone':'0119991234','birth':'1118'}
print(a.get('name')) # 존재하지 않는 키 None 반환
print(a['name']) # 존재하지 않는 키 오류 발생
# 키 값이 없는 경우 디폴트값 반환
print(a.get('foo','bar'))
# 해당 키가 딕셔너리에 존재하는지 조사 in
a = {'name':'pey','phone':'0119991234','birth':'1118'}
print('name' in a)
print('email' in a)
# 2-6 집합 자료형
s1 = set([1,2,3])
print(s1)
s2 = set("Hello")
print(s2)
# 집합 자료형 특징
# 중복 허용 X , 순서 없음
# set 자료형에 인덱싱으로 접근하려면 리스트나 튜플로 변환해야함
s1 = set([1,2,3])
l1 = list(s1)
l1[0]
# 집합
s1 = set([1,2,3,4,5,6])
s2 = set([4,5,6,7,8,9])
# 교집합
print(s1&s2)
print(s1.intersection(s2))
# 합집합
print(s1|s2)
print(s1.union(s2))
# 차집합
print(s1 - s2)
print(s2.difference(s1))
# 집합 자료형 관련 함수
# 값 1개 추가 add
s1 = set([1,2,3])
s1.add(4)
print(s1)
# 값 여러개 추가 update
s1 = set([1,2,3])
s1.update([4,5,6])
print(s1)
# 특정 값 제거 remove
s1.remove(2)
print(s1)
# 2-7 불 자료형
a = True
b = False
print(type(a)) # 자료형 확인하는 파이썬 내장 함수
print(1==1)
print(2>1)
# 문자열,리스트,튜플,딕셔너리 등의 값이 비어있으면 거짓, 아니라면 참
# 숫자의 경우 값이 0이면 거짓 그 외에는 참
a = [1,2,3,4]
while a:
    print(a.pop())
# a가 모두 pop되어 빈 리스트가 되면 거짓이 되므로 while문 중지
if [1,2,3]:
    print("참")
else:
    print("거짓")
# 불 연산
print(bool('python'))
print(bool(''))
print(bool(0))
print(bool(3))
# 2-8 자료형의 값을 저장하는 공간, 변수
# 변수를 만들 때는 = (assignment) 기호 사용
# 파이썬은 저장된 값을 스스로 판단하여 자료형 지정
a = [1,2,3] # [1,2,3] 값을 가지는 리스트 자료형이 자동으로 메모리에 생성되고, 변수 a는 리스트가 저장된 메모리의 주소 가리키게 됨.
# 메모리의 주소 확인
print(id(a))
# 리스트 복사
a = [1,2,3]
b = a # 동일 객체 가리킴
print(id(a))
print(id(b))
print( a is b ) # a와b가 가리키는 객체가 동일한가 ?
# 다른 주소 가리키도록 변수 생성
a = [1,2,3]
b = a[:]
a[1] = 4
print(a)
print(b)
# copy 모듈 이용
from copy import copy
a = [1,2,3]
b = copy(a)
print(b is a)
# 변수 값 바꾸기
a = 3
b = 5
a,b = b,a
print(a)
print(b)

# 2장 연습문제
# 1번
print((80+75+55)/3)
# 2번
a = 13
if a%2 == 1:
    print("홀수")
else:
    print("짝수")
# 3번
number = "881120-1068234"
ymd = number[:6]
etc = number[7:]
print(ymd)
print(etc)
# 4번
pin = "881020-1068234"
print(pin[7])
# 5번
a = "a:b:c:d"
print(a.replace(":","#"))
# 6번
a = [1,3,5,4,2]
a.sort()
a.reverse()
print(a)
# 7번
l1 = ['Life','is','too','short']
print(" ".join(l1[:]))
# 8번
tup = (1,2,3)
print(tup + (4,))
# 9번
a = dict()
# 3번 a[[1]] = 'python' -> 리스트는 변경가능한 형태로 키로 사용할 수 없음.
# 10번
a = {'A':90,'B':80,'C':70}
print(a.pop('B'))
# 11번
a = [1,1,1,2,2,3,3,3,4,4,5]
a = set(a)
print(a)
# 12번
a = b = [1,2,3]
a[1] = 4
print(b)
# b의 두번째 요소값도 4로 변경된다. a 와 b 가 같은 주소를 가지며 동일한 객체를 가리키기 떄문이다.